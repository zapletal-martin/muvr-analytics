logging {
  level = INFO

  # Log dead letters
  dead-letters = on

  # Log all LoggingFSMs for events, transitions and timers (using akka.actor.LoggingFSM[StateType, Data])
  fsm = on

  # Logging of message invocations on certain (local) actors (using akka.event.LoggingReceive)
  receive = on

  # Log unhandled actor messages
  unhandled = on

  # Log cluster informational messages
  cluster = on

  # Log all inbound and outbound messages to remote actors
  remote = off
}

akka {
  loglevel = ${logging.level}
  log-dead-letters = ${logging.dead-letters}

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  actor {

    serialization-bindings {
      "io.muvr.exercise.ExercisePlanDeviation" = kryo,
      "io.muvr.exercise.ResistanceExercise" = kryo,
      "io.muvr.exercise.ResistanceExerciseSet" = kryo,
      "io.muvr.exercise.ResistanceExerciseSetExample" = kryo,
      "io.muvr.exercise.EntireResistanceExerciseSession" = kryo,
      "io.muvr.exercise.ResistanceExerciseSession" = kryo,
      "io.muvr.exercise.Rest" = kryo,
      "io.muvr.exercise.SessionId" = kryo
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

  }
}

cassandra {
  host = ${?CASSANDRA_HOST}
}

spark {
  master = "spark://"${?SPARK_MASTER_HOST}":"${?SPARK_MASTER_PORT}
}

jobs {
  suggestions {
    historySizeParameter = 5
    futureSizeParameter = 3
    interval = 30m
    includeUsersSessionEndedBefore = 35m
  }
}

app {
  rest {
    api = ${?APP_REST_API}
    port = ${?APP_REST_PORT}
  }
}
